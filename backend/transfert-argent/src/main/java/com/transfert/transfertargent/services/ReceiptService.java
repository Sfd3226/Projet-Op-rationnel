package com.transfert.transfertargent.services;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.transfert.transfertargent.models.Receipt;
import com.transfert.transfertargent.models.Transaction;
import com.transfert.transfertargent.repositories.ReceiptRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class ReceiptService {

    private final ReceiptRepository receiptRepository;
    private static final String RECEIPTS_DIR = "receipts/";

    /**
     * G√©n√®re un re√ßu PDF pour une transaction
     * @param transaction La transaction pour laquelle g√©n√©rer le re√ßu
     * @return Le re√ßu g√©n√©r√©
     */
    public Receipt generateReceipt(Transaction transaction) {
        try {
            // ‚úÖ V√âRIFICATION SI UN RE√áU EXISTE D√âJ√Ä (NOUVEAU)
            Optional<Receipt> existingReceipt = receiptRepository.findByTransactionId(transaction.getId());
            if (existingReceipt.isPresent()) {
                System.out.println("üìÑ Re√ßu existant trouv√© pour la transaction " + transaction.getId() + ", retour du re√ßu existant");
                return existingReceipt.get();
            }

            // ‚úÖ Validation de la transaction
            validateTransaction(transaction);

            // ‚úÖ Cr√©ation du r√©pertoire si inexistant
            createReceiptsDirectory();

            // ‚úÖ G√©n√©ration num√©ro unique
            String numero = generateNumeroUnique();

            // ‚úÖ Cr√©ation du PDF
            String filename = numero + ".pdf";
            String filePath = RECEIPTS_DIR + filename;

            createPdfReceipt(transaction, filePath);

            // ‚úÖ Enregistrement du re√ßu en base
            Receipt receipt = saveReceiptToDatabase(transaction, numero, filePath);

            System.out.println("‚úÖ Nouveau re√ßu g√©n√©r√© avec succ√®s: " + numero);
            return receipt;

        } catch (IllegalArgumentException e) {
            // ‚úÖ Erreur de validation m√©tier
            System.err.println("‚ùå Erreur validation re√ßu: " + e.getMessage());
            throw new RuntimeException("Erreur validation: " + e.getMessage());

        } catch (DocumentException e) {
            // ‚úÖ Erreur de g√©n√©ration PDF
            System.err.println("‚ùå Erreur g√©n√©ration PDF: " + e.getMessage());
            throw new RuntimeException("Erreur cr√©ation PDF: " + e.getMessage());

        } catch (Exception e) {
            // ‚úÖ Erreur g√©n√©rale
            System.err.println("‚ùå Erreur g√©n√©ration re√ßu: " + e.getMessage());
            throw new RuntimeException("Erreur g√©n√©ration re√ßu: " + e.getMessage());
        }
    }

    /**
     * R√©cup√®re ou g√©n√®re un re√ßu PDF pour une transaction
     */
    public Receipt getOrGenerateReceipt(Transaction transaction) {
        // ‚úÖ V√©rifie si un re√ßu existe d√©j√†
        Optional<Receipt> existingReceipt = receiptRepository.findByTransactionId(transaction.getId());
        if (existingReceipt.isPresent()) {
            System.out.println("üìÑ Re√ßu existant trouv√©, retour: " + existingReceipt.get().getNumero());
            return existingReceipt.get();
        }

        // ‚úÖ G√©n√®re un nouveau re√ßu si aucun n'existe
        System.out.println("üÜï Aucun re√ßu existant, g√©n√©ration d'un nouveau");
        return generateReceipt(transaction);
    }

    /**
     * Valide la transaction avant g√©n√©ration du re√ßu
     */
    private void validateTransaction(Transaction transaction) {
        if (transaction == null) {
            throw new IllegalArgumentException("Transaction ne peut pas √™tre null");
        }

        if (!"SUCCES".equals(transaction.getStatut())) {
            throw new IllegalArgumentException("Re√ßu ne peut √™tre g√©n√©r√© que pour les transactions SUCCES");
        }

        if (transaction.getCompteSource() == null || transaction.getCompteDestination() == null) {
            throw new IllegalArgumentException("Transaction doit avoir un exp√©diteur et un destinataire");
        }

        if (transaction.getMontant() == null || transaction.getMontant() <= 0) {
            throw new IllegalArgumentException("Montant de transaction invalide");
        }
    }

    /**
     * Cr√©e le r√©pertoire de stockage des re√ßus
     */
    private void createReceiptsDirectory() throws Exception {
        Path dirPath = Paths.get(RECEIPTS_DIR);
        if (!Files.exists(dirPath)) {
            Files.createDirectories(dirPath);
        }

        // ‚úÖ V√©rification des permissions d'√©criture
        if (!Files.isWritable(dirPath)) {
            throw new Exception("Permissions insuffisantes pour √©crire dans le dossier receipts/");
        }
    }

    /**
     * G√©n√®re un num√©ro de re√ßu unique
     */
    private String generateNumeroUnique() {
        String numero;
        int attempts = 0;
        final int MAX_ATTEMPTS = 10;

        do {
            if (attempts++ >= MAX_ATTEMPTS) {
                throw new RuntimeException("Impossible de g√©n√©rer un num√©ro de re√ßu unique");
            }

            numero = "RC" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"))
                    + UUID.randomUUID().toString().substring(0, 6).toUpperCase();

        } while (receiptRepository.existsByNumero(numero));

        return numero;
    }

    /**
     * Cr√©e le PDF du re√ßu
     */
    private void createPdfReceipt(Transaction transaction, String filePath) throws Exception {
        Document document = new Document();
        FileOutputStream fos = null;

        try {
            fos = new FileOutputStream(filePath);
            PdfWriter.getInstance(document, fos);
            document.open();

            // ‚úÖ Titre du document
            addTitle(document);

            // ‚úÖ Informations de la transaction
            addTransactionDetails(document, transaction);

            // ‚úÖ Informations des parties
            addPartiesInfo(document, transaction);

            // ‚úÖ Footer
            addFooter(document);

        } finally {
            // ‚úÖ Fermeture s√©curis√©e des ressources
            if (document.isOpen()) {
                document.close();
            }
            if (fos != null) {
                fos.close();
            }
        }
    }

    /**
     * Ajoute le titre au PDF
     */
    private void addTitle(Document document) throws DocumentException {
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD, BaseColor.BLUE);
        Paragraph title = new Paragraph("RE√áU DE TRANSFERT D'ARGENT", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(20);
        document.add(title);
    }

    /**
     * Ajoute les d√©tails de la transaction au PDF
     */
    private void addTransactionDetails(Document document, Transaction transaction) throws DocumentException {
        Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12);

        PdfPTable table = new PdfPTable(2);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10);
        table.setSpacingAfter(20);

        addTableRow(table, "Num√©ro Transaction:", transaction.getId().toString(), boldFont, normalFont);
        addTableRow(table, "Date Transaction:",
                transaction.getDateTransaction().format(DateTimeFormatter.ofPattern("dd/MM/yyyy √† HH:mm")),
                boldFont, normalFont);
        addTableRow(table, "Montant Transf√©r√©:", String.format("%,.2f FCFA", transaction.getMontant()), boldFont, normalFont);
        addTableRow(table, "Frais (1%):", String.format("%,.2f FCFA", transaction.getFrais()), boldFont, normalFont);
        addTableRow(table, "Total D√©bit√©:", String.format("%,.2f FCFA", transaction.getMontant() + transaction.getFrais()), boldFont, normalFont);
        addTableRow(table, "Statut:", transaction.getStatut(), boldFont, normalFont);

        document.add(table);
    }

    /**
     * Ajoute les informations des parties au PDF
     */
    private void addPartiesInfo(Document document, Transaction transaction) throws DocumentException {
        Font headerFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD, BaseColor.DARK_GRAY);
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12);

        // ‚úÖ Section Exp√©diteur
        Paragraph expediteurHeader = new Paragraph("EXP√âDITEUR", headerFont);
        expediteurHeader.setSpacingAfter(10);
        document.add(expediteurHeader);

        PdfPTable expediteurTable = new PdfPTable(2);
        expediteurTable.setWidthPercentage(100);
        expediteurTable.setSpacingAfter(20);

        addTableRow(expediteurTable, "Nom:",
                transaction.getCompteSource().getUser().getPrenom() + " " +
                        transaction.getCompteSource().getUser().getNom(),
                normalFont, normalFont);
        addTableRow(expediteurTable, "T√©l√©phone:",
                transaction.getCompteSource().getNumeroTelephone(),
                normalFont, normalFont);

        document.add(expediteurTable);

        // ‚úÖ Section Destinataire
        Paragraph destinataireHeader = new Paragraph("DESTINATAIRE", headerFont);
        destinataireHeader.setSpacingAfter(10);
        document.add(destinataireHeader);

        PdfPTable destinataireTable = new PdfPTable(2);
        destinataireTable.setWidthPercentage(100);

        addTableRow(destinataireTable, "Nom:",
                transaction.getCompteDestination().getUser().getPrenom() + " " +
                        transaction.getCompteDestination().getUser().getNom(),
                normalFont, normalFont);
        addTableRow(destinataireTable, "T√©l√©phone:",
                transaction.getCompteDestination().getNumeroTelephone(),
                normalFont, normalFont);

        document.add(destinataireTable);
    }

    /**
     * Ajoute le footer au PDF
     */
    private void addFooter(Document document) throws DocumentException {
        Font footerFont = new Font(Font.FontFamily.HELVETICA, 10, Font.ITALIC);
        Font smallFont = new Font(Font.FontFamily.HELVETICA, 8);

        Paragraph footer = new Paragraph("\n\n", footerFont);
        footer.add(new Chunk("Ce re√ßu est une preuve l√©gale de votre transaction. ", footerFont));
        footer.add(new Chunk("Conservez-le pour vos archives.", footerFont));
        footer.setAlignment(Element.ALIGN_CENTER);
        document.add(footer);

        Paragraph generatedInfo = new Paragraph(
                "G√©n√©r√© le " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy √† HH:mm")),
                smallFont
        );
        generatedInfo.setAlignment(Element.ALIGN_CENTER);
        document.add(generatedInfo);
    }

    /**
     * Ajoute une ligne au tableau PDF
     */
    private void addTableRow(PdfPTable table, String label, String value, Font labelFont, Font valueFont) {
        PdfPCell labelCell = new PdfPCell(new Phrase(label, labelFont));
        labelCell.setBorder(PdfPCell.NO_BORDER);
        labelCell.setPadding(5);

        PdfPCell valueCell = new PdfPCell(new Phrase(value, valueFont));
        valueCell.setBorder(PdfPCell.NO_BORDER);
        valueCell.setPadding(5);

        table.addCell(labelCell);
        table.addCell(valueCell);
    }

    /**
     * Sauvegarde le re√ßu en base de donn√©es
     */
    private Receipt saveReceiptToDatabase(Transaction transaction, String numero, String filePath) {
        Receipt receipt = Receipt.builder()
                .numero(numero)
                .urlFichier(filePath)
                .transaction(transaction)
                .build();

        Receipt receiptSauvegarde = receiptRepository.save(receipt);

        // ‚úÖ Mise √† jour de la transaction avec le re√ßu
        transaction.setReceipt(receiptSauvegarde);

        return receiptSauvegarde;
    }

    /**
     * R√©cup√®re un re√ßu par son num√©ro
     */
    public Receipt getReceiptByNumero(String numero) {
        return receiptRepository.findByNumero(numero)
                .orElseThrow(() -> new RuntimeException("Re√ßu non trouv√© avec le num√©ro: " + numero));
    }

    /**
     * R√©cup√®re un re√ßu par l'ID de transaction
     */
    public Receipt getReceiptByTransactionId(Long transactionId) {
        return receiptRepository.findByTransactionId(transactionId)
                .orElseThrow(() -> new RuntimeException("Aucun re√ßu trouv√© pour la transaction ID: " + transactionId));
    }

    /**
     * V√©rifie si un re√ßu existe pour une transaction
     */
    public boolean receiptExistsForTransaction(Long transactionId) {
        return receiptRepository.findByTransactionId(transactionId).isPresent();
    }
}